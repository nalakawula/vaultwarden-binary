name: Build

on:
  push:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update:
    name: Update
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Update
        run: |
          #!/bin/bash
          latestVersion="$(curl -q --fail 'https://api.github.com/repos/dani-garcia/vaultwarden/releases/latest' | jq -r '.tag_name' -)"
          if gh release view "$latestVersion" --repo "$GITHUB_REPOSITORY"; then
            echo "$latestVersion" > log
            exit 0
          fi

          archArr=(linux/amd64 linux/arm64 linux/arm/v7 linux/arm/v6)
          for arch in ${archArr[@]}; do
            arch2="${arch//\//-}"
            mkdir "$arch2"
            docker pull --platform "$arch" vaultwarden/server:"$latestVersion"
            id="$(docker create vaultwarden/server:"$latestVersion")"
            docker cp "$id":/vaultwarden "$arch2/vaultwarden"
            docker cp "$id":/web-vault "$arch2/web-vault"
            docker rm -v "$id"
            tar -cvf vaultwarden-"$arch2".tar.gz "$arch2/vaultwarden" "$arch2/web-vault"
          done
          gh release create "$latestVersion" --title "$latestVersion" --repo "$GITHUB_REPOSITORY" --notes "Update to [$latestVersion](https://github.com/dani-garcia/vaultwarden/releases/tag/$latestVersion)" *.tar.gz
          echo "$latestVersion" > log
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Check for changes
        id: changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are any changes
          if git diff --quiet; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git add log
          git commit -m "Vaultwarden new release - $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
      - name: Create Pull Request
        if: steps.changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v7
